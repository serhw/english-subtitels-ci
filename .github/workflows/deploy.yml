name: Deploy to Docker Swarm

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to Docker Swarm
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          set -e  # Exit on any error
          set -u  # Exit on undefined variables
          
          # Create deployment directory if it doesn't exist
          mkdir -p /opt/english-subtitels
          cd /opt/english-subtitels
          
          # Download docker-compose file
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3.raw" \
               -o docker-compose.yml \
               https://api.github.com/repos/${{ github.repository }}/contents/docker-compose.production.yml
          
          # Check Docker Swarm status
          echo "=== Docker Swarm Status ==="
          if ! docker node ls; then
            echo "‚ùå ERROR: Docker Swarm not initialized"
            exit 1
          fi
          
          # Check existing stacks
          echo "=== Existing Stacks ==="
          docker stack ls
          
          # Check required secrets (must exist for deployment to work)
          echo "=== Checking Docker Secrets ==="
          docker secret ls
                    
          if ! docker secret inspect subtitles_db_connection >/dev/null 2>&1; then
            echo "‚ùå ERROR: subtitles_db_connection secret not found"
            echo "Create it with: echo 'your_connection_string' | docker secret create subtitles_db_connection -"
            exit 1
          fi
          
          echo "‚úÖ All required secrets found"
          
          # Show docker-compose content
          echo "=== Docker Compose Content ==="
          cat docker-compose.yml
          
          # Check volumes before removal (for safety)
          echo "=== Volumes Before Stack Removal ==="
          docker volume ls | grep -E "(seq-data|serilog-buffer|traefik-certificates)" || echo "No relevant volumes found yet"
          
          # Remove existing stack to avoid port conflicts
          echo "=== Removing Existing Stack (if any) ==="
          docker stack rm english-subtitels || echo "No existing stack to remove"
          
          # Wait for cleanup
          echo "Waiting for stack cleanup..."
          sleep 10
          
          # Verify volumes still exist after stack removal
          echo "=== Volumes After Stack Removal (should still exist) ==="
          docker volume ls | grep -E "(seq-data|serilog-buffer|traefik-certificates)" || echo "No volumes found - will be created on deploy"
          
          # Deploy the stack
          echo "=== Deploying Stack ==="
          docker stack deploy -c docker-compose.yml --with-registry-auth english-subtitels
          
          # Wait for deployment
          echo "=== Waiting for deployment ==="
          sleep 30
          
          # Show detailed service status
          echo "=== Service Status ==="
          docker stack services english-subtitels
          
          echo "=== Service Tasks ==="
          docker stack ps english-subtitels --no-trunc
          
          echo "=== Service Logs (last 50 lines) ==="
          set +e  # Temporarily disable exit on error for optional log commands
          docker service logs --tail 50 english-subtitels_traefik 2>/dev/null || echo "No logs for traefik"
          docker service logs --tail 50 english-subtitels_subtitles-api 2>/dev/null || echo "No logs for subtitles-api"
          docker service logs --tail 50 english-subtitels_seq 2>/dev/null || echo "No logs for seq"
          set -e  # Re-enable exit on error
          
          # Check which services are actually running
          echo "=== Service Status Detail ==="
          docker stack services english-subtitels --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}"
          
          # Check Traefik configuration and service discovery
          echo "=== Traefik Config Check ==="
          docker service logs --tail 20 english-subtitels_traefik | grep -i "provider\|swarm\|service\|discovery\|router\|seq" || echo "No provider logs found"
          
          # Check if services are on the same network
          echo "=== Network Configuration ==="
          docker network ls | grep app-network || echo "app-network not found"
          echo "Available networks:"
          docker network ls
          
          # Check service details
          echo "=== Service Labels Check ==="
          docker service inspect english-subtitels_seq --format '{{.Spec.Labels}}' || echo "Seq service not found"
          docker service inspect english-subtitels_traefik --format '{{.Spec.Labels}}' || echo "Traefik service not found"
          
          # Test internal connectivity
          echo "=== Internal Connectivity Test ==="
          docker service logs --tail 5 english-subtitels_traefik | grep -i "seq\|router\|discovered" || echo "No service discovery logs"
          
          # Check if seq is reachable internally
          TRAEFIK_CONTAINER=$(docker ps --filter "name=english-subtitels_traefik" --format "{{.ID}}" | head -1)
          if [ -n "$TRAEFIK_CONTAINER" ]; then
            echo "Testing internal seq connectivity from Traefik container..."
            
            # Test basic connectivity to Seq UI (port 80)
            if docker exec $TRAEFIK_CONTAINER wget -qO- --timeout=5 http://seq:80 >/dev/null 2>&1; then
              echo "‚úÖ Seq UI reachable internally"
            else
              echo "‚ùå Seq UI not reachable internally - trying different approaches..."
              
              # Check if seq service is actually running
              echo "Seq service logs (last 10 lines):"
              docker service logs --tail 10 english-subtitels_seq || echo "No seq logs"
              
              # Test connectivity with more details
              echo "Detailed connectivity test to Seq UI:"
              docker exec $TRAEFIK_CONTAINER wget -O- --timeout=5 http://seq:80 2>&1 | head -5 || echo "Detailed test failed"
              
              # Also test the ingestion port (5341) to ensure Seq is running
              echo "Testing Seq ingestion port (5341) for service health:"
              docker exec $TRAEFIK_CONTAINER wget -qO- --timeout=5 http://seq:5341 >/dev/null 2>&1 && echo "‚úÖ Seq ingestion port healthy" || echo "‚ùå Seq ingestion port not responding"
            fi
          fi
                    
          # Verify deployment success
          echo "=== Verifying Deployment ==="
          TOTAL_SERVICES=$(docker stack services english-subtitels --format "{{.Name}}" | wc -l)
          RUNNING_SERVICES=$(docker stack services english-subtitels --format "table {{.Name}}\t{{.Replicas}}" | grep -c "1/1\|2/2" || true)
          
          echo "Total services: $TOTAL_SERVICES, Running properly: $RUNNING_SERVICES"
          
          # We expect 3 services: traefik(1/1), seq(1/1), subtitles-api(2/2)
          if [ "$RUNNING_SERVICES" -lt 3 ]; then
            echo "‚ùå WARNING: Not all services are running properly"
            echo "Expected: 3 services running, Got: $RUNNING_SERVICES"
            # Don't fail deployment, but warn
          else
            echo "‚úÖ All services running properly!"
          fi
          
          echo "‚úÖ Deployment completed - Check logs above for any issues"
          
          # HTTPS Setup Information
          echo ""
          echo "=== HTTPS Setup Information ==="
          echo "üîí SSL certificates will be automatically requested from Let's Encrypt"
          echo "üåê Access your services via:"
          echo "   ‚Ä¢ API: https://sub-english.top (with auto HTTP‚ÜíHTTPS redirect)"
          echo "   ‚Ä¢ Seq Logs: https://logs.sub-english.top (with auto HTTP‚ÜíHTTPS redirect)"
          echo "   ‚Ä¢ Traefik Dashboard: https://traefik.sub-english.top (with auto HTTP‚ÜíHTTPS redirect)"
          echo ""
          echo "‚è≥ SSL certificates may take 1-2 minutes to be issued on first deployment"
          echo "üîÑ HTTP requests will automatically redirect to HTTPS"
          
          # Clean up old images (optional)
          set +e  # Don't fail if cleanup fails
          docker system prune -f
          set -e
