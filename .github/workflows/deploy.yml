name: Deploy to Docker Swarm

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to Docker Swarm
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          set -e  # Exit on any error
          set -u  # Exit on undefined variables
          
          # Create deployment directory if it doesn't exist
          mkdir -p /opt/english-subtitels
          cd /opt/english-subtitels
          
          # Download docker-compose file
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3.raw" \
               -o docker-compose.yml \
               https://api.github.com/repos/${{ github.repository }}/contents/docker-compose.production.yml
          
          # Check Docker Swarm status
          echo "=== Docker Swarm Status ==="
          if ! docker node ls; then
            echo "❌ ERROR: Docker Swarm not initialized"
            exit 1
          fi
          
          # Check existing stacks
          echo "=== Existing Stacks ==="
          docker stack ls
          
          # Check required secrets (must exist for deployment to work)
          echo "=== Checking Docker Secrets ==="
          docker secret ls
                    
          if ! docker secret inspect subtitles_db_connection >/dev/null 2>&1; then
            echo "❌ ERROR: subtitles_db_connection secret not found"
            echo "Create it with: echo 'your_connection_string' | docker secret create subtitles_db_connection -"
            exit 1
          fi
          
          echo "✅ All required secrets found"
          
          # Show docker-compose content
          echo "=== Docker Compose Content ==="
          cat docker-compose.yml
          
          # Check volumes before removal (for safety)
          echo "=== Volumes Before Stack Removal ==="
          docker volume ls | grep -E "(seq-data|serilog-buffer|traefik-certificates)" || echo "No relevant volumes found yet"
          
          # Remove existing stack to avoid port conflicts
          echo "=== Removing Existing Stack (if any) ==="
          docker stack rm english-subtitels || echo "No existing stack to remove"
          
          # Wait for cleanup
          echo "Waiting for stack cleanup..."
          sleep 10
          
          # Verify volumes still exist after stack removal
          echo "=== Volumes After Stack Removal (should still exist) ==="
          docker volume ls | grep -E "(seq-data|serilog-buffer|traefik-certificates)" || echo "No volumes found - will be created on deploy"
          
          # Deploy the stack
          echo "=== Deploying Stack ==="
          docker stack deploy -c docker-compose.yml --with-registry-auth english-subtitels
          
          # Wait for deployment
          echo "=== Waiting for deployment ==="
          sleep 30
          
          # Show detailed service status
          echo "=== Service Status ==="
          docker stack services english-subtitels
          
          echo "=== Service Tasks ==="
          docker stack ps english-subtitels --no-trunc
          
          echo "=== Service Logs (last 50 lines) ==="
          set +e  # Temporarily disable exit on error for optional log commands
          docker service logs --tail 50 english-subtitels_subtitles-api 2>/dev/null || echo "No logs for subtitles-api"
          docker service logs --tail 50 english-subtitels_seq 2>/dev/null || echo "No logs for seq"
          set -e  # Re-enable exit on error
          
          # Verify deployment success
          echo "=== Verifying Deployment ==="
          RUNNING_SERVICES=$(docker stack services english-subtitels --format "table {{.Name}}\t{{.Replicas}}" | grep -c "1/1\|2/2" || true)
          if [ "$RUNNING_SERVICES" -eq 0 ]; then
            echo "❌ ERROR: No services are running properly"
            exit 1
          fi
          echo "✅ Deployment successful - $RUNNING_SERVICES services running"
          
          # Clean up old images (optional)
          set +e  # Don't fail if cleanup fails
          docker system prune -f
          set -e
